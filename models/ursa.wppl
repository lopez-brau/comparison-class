// sample(threshold)
// sample(comparison-class)
// sample(prior(comparison-class))

var s1optimality = 5
var thresholdBins = _.range(-2, 12, 0.5) - 0.25
var thresholdPrior = function() {
  var threshold = uniformDraw(thresholdBins)
  return threshold
}
thresholdBins

var utterancePrior = function() {
  var utterances = ["is tall", "mu"]  
  return flip(0.5) ? utterances[0] : utterances[1]
}

var meaning = function(utt,state, threshold) {
  return _.isNumber(utt) ? state == utt :
  utt=="generic is true"? state>threshold :
  utt=="generic is false"? state<=threshold :
  utt=='mu'? true:
  utt=='some'? state>0:
  utt=='most'? state>= 0.5:
  utt=='all'? state >= 0.99:
  true
}

var listener0 = cache(function(utterance, threshold, prior) {
  Infer({method: "enumerate"}, function() {
    var state = sample(prior)
    var m = meaning(utterance, state, threshold)
    condition(m)
    return state
  })
})

var speaker1 = cache(function(state, threshold, prior) {
  Infer({method: "enumerate"}, function() {
    var utterance = utterancePrior()
    var L0 = listener0(utterance, threshold, prior)
    factor(s1optimality * L0.score(state))
    return utterance
  })
})


var listener1 = function(utterance, prior) {
  Infer({method: "enumerate"}, function() {
    var state = sample(prior)
    var threshold = thresholdPrior()
    var S1 = speaker1(state, threshold, prior)
    factor(S1.score(utterance))
    return state
  })
}

// example priors
var isTallERP = classPrior("humans", "height")

isTallERP

/*var isTallPosterior = listener1("generic is true", isTallERP)

isTallPosterior
*/