// sample(threshold)
// sample(comparison-class)
// sample(prior(comparison-class))

var s1optimality = 5

var thresholdPrior = function() {
    return uniformDraw(_.range(-2, 12, 0.5)) - 0.25
}

var utterancePrior = function() {
    // the speaker will communicate an utterance or not
    var utterances = ["is tall", ""]  
    return flip(0.5) ? utterances[0] : utterances[1]
}

var meaning = function(utterance, state, threshold) {
    if (_.isNumber(utterance)) {
        return (state == utterance)
    } else if (utterance == "is tall") {
        return (state > threshold)
    } else if (utterance == "") {
        return true
    } else {
        return true
    }
}
// randomly pick a height from the prior just like adjectives
// picks a price
var listener0 = cache(function(utterance, threshold, prior) {
    return Infer({method: "enumerate"}, function() {
        var state = sample(prior)
        var m = meaning(utterance, state, threshold)
        condition(m)
        return state
    })
})

var speaker1 = cache(function(state, threshold, prior) {
    return Infer({method: "enumerate"}, function() {
        var utterance = utterancePrior()
        var L0 = listener0(utterance, threshold, prior)
        factor(s1optimality * L0.score(state))
        return utterance
    })
})

var listener1 = function(utterance, prior) {
    return Infer({method: "enumerate"}, function() {
        var state = sample(prior)
        var threshold = thresholdPrior()
        var S1 = speaker1(state, threshold, prior)
        factor(S1.score(utterance))
        return state
    })
}

var isTallERP = classPrior("humans", "height")

isTallERP

var isTallPosterior = listener1("is tall", isTallERP)

isTallPosterior
