// This program must be able to:
// - sample(threshold)
// - sample(comparison-class)
// - sample(prior(comparison-class))

// list of features
var features = {
  "is tall": "height"
}

// *look up what this parameter actually does*
var s1optimality = 5

var thresholdPrior = function() {
  return uniformDraw(_.range(-2, 12, 0.5)) - 0.25
}

// the speaker will communicate an utterance or not
var utterances = ["is tall", ""]

// the cost of each utterance
var cost = {
  "is tall": 1,
  "": 0
}

var utterancePrior = function() {
  return utterances[discrete(map(function(u) {
    return Math.exp(-cost[u])
  }, utterances))]
}

var meaning = function(utterance, state, threshold) {
  if (_.isNumber(utterance)) {
    return (state == utterance)
  } else if (utterance == "is tall") {
    return (state > threshold)
  } else if (utterance == "") {
    return true
  } else {
    return true
  }
}

// literal listener model
var listener0 = cache(function(utterance, threshold, prior) {
  return Infer({method: "enumerate"}, function() {
    var state = sample(prior)
    var m = meaning(utterance, state, threshold)
    condition(m)
    return state
  })
})

// informative speaker model
var speaker1 = cache(function(state, threshold, prior) {
  return Infer({method: "enumerate"}, function() {
    var utterance = utterancePrior()
    var L0 = listener0(utterance, threshold, prior)
    factor(s1optimality * L0.score(state))
    return utterance
  })
})

// pragmatic listener model
var listener1 = function(utterance, prior) {
  return Infer({method: "enumerate"}, function() {
    var state = sample(prior)
    var threshold = thresholdPrior()
    var S1 = speaker1(state, threshold, prior)
    factor(S1.score(utterance))
    return state
  })
}

// finds the prior of humans over height
var isTallERP = findPrior("humans", "height")

isTallERP

// updates the listener's prior belief of what tall is given an utterance
var isTallPosterior = listener1("is tall", isTallERP)

isTallPosterior