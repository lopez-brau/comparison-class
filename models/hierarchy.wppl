// set up the ontological tree with basic ontologies
var ontologies = [ 
	{
		category: "ALL THINGS", 
		parent: null, 
		children: ["THINGS WITH SPATIAL LOCATION", "ABSTRACT OBJECTS"] 
	},
	{ 
		category: "THINGS WITH SPATIAL LOCATION", 
		parent: "ALL THINGS",
		children: ["PHYSICAL OBJECTS", "EVENTS"]
	},
	{
		category: "ABSTRACT OBJECTS",
		parent: "ALL THINGS",
		children: []
	},
	{ 
		category: "PHYSICAL OBJECTS", 
		parent: "THINGS WITH SPATIAL LOCATION",
		children: ["SOLID OBJECTS", "AGGREGATES"] 
	}, 
	{ 
		category: "EVENTS", 
		parent: "THINGS WITH SPATIAL LOCATION",
		children: []
	},
	{ 
		category: "SOLID OBJECTS", 
		parent: "PHYSICAL OBJECTS",
		children: ["LIVING THINGS", "FUNCTIONAL ARTIFACTS"] 
	},
	{ 
		category: "AGGREGATES", 
		parent: "PHYSICAL OBJECTS",
		children: [] 
	}, 
	{ 
		category: "LIVING THINGS", 
		parent: "SOLID OBJECTS",
		children: ["ANIMALS", "PLANTS"] 
	}, 
	{ 
		category: "FUNCTIONAL ARTIFACTS", 
		parent: "SOLID OBJECTS",
		children: [] 
	}, 
	{ 
		category: "ANIMALS", 
		parent: "LIVING THINGS",
		children: [] 
	}, 
	{ 
		category: "PLANTS", 
		parent: "LIVING THINGS",
		children: [] 
	},
]

var makeNode = function(args) {
	// creates and pushes a node to the tree
	var node = {
		category: args[0],
		parent: args[1],
		children: args[2]
	}
	ontologies.push(node)

	// update the parent node
	_.where(ontologies, {category: args[1]})[0].children.push(args[0])

	return ontologies
}

// creates nodes of kinds
makeNode(["humans", "ANIMALS", []])
makeNode(["parties", "EVENTS", []])
makeNode(["phones", "FUNCTIONAL ARTIFACTS", []])
makeNode(["iphone", "phones", []])

// set up the priors
var bins = _.range(-2, 12, 0.5)

var discreteGaussian = function(args) {
	var mu = args.mu
	var sigma = args.sigma
	var discreteProbs = map(function(b) {
		return Math.exp(Gaussian({mu: mu, sigma: sigma}).score(b))
	}, bins)
	return Infer({method: 'enumerate'}, function() {
		categorical({ps: discreteProbs, vs: bins})
	})
}

var featurePriors = {
	humans: discreteGaussian({mu: 1, sigma: 1}),
	parties: discreteGaussian({mu: 4, sigma: 1}),
	phones: discreteGaussian({mu: 7, sigma: 1}),
	iphone: discreteGaussian({mu: 2, sigma: 1})
}

var kinds = []

// returns 0 if a character is lowercase, 1 otherwise
var isLower = function(char) {
	return char === char.toLowerCase() ? 0 : 1
}

// recursively traverses through the tree, finding and storing the kinds
var findKinds = function(cat) {
	// if there is no category, then return
	if (_.isEmpty(cat)) { return } 

	// if there is a category and it happens to be a kind, then save it
	if (sum(map(isLower, cat)) === 0) { kinds.push(cat) } 
	var targetCat = _.where(ontologies, {category: cat})[0]

	// if this node has no children, then return
	if (_.isEmpty(targetCat.children)) { return }
	
	// applies recursion to every child of the current category
	map(findKinds, targetCat.children)

	return kinds
}

// samples from and returns a mixture of the priors of the relevant kinds
var getPrior = function(cat) {
	Infer({method: 'enumerate'}, function() {
		var whichKind = categorical({vs: findKinds(cat), ps: [1, 1, 1]})
		return sample(featurePriors[whichKind])
	})
}

getPrior("SOLID OBJECTS")
