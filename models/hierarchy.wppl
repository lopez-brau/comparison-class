// set up the ontological tree with basic ontologies
var ontologies = [ 
	{
		node: "ALL THINGS", 
		parent: null, 
		children: ["THINGS WITH SPATIAL LOCATION", "ABSTRACT OBJECTS"] 
	},
	{ 
		node: "THINGS WITH SPATIAL LOCATION", 
		parent: "ALL THINGS",
		children: ["PHYSICAL OBJECTS", "EVENTS"]
	},
	{
		node: "ABSTRACT OBJECTS",
		parent: "ALL THINGS",
		children: []
	},
	{ 
		node: "PHYSICAL OBJECTS", 
		parent: "THINGS WITH SPATIAL LOCATION",
		children: ["SOLID OBJECTS", "AGGREGATES"] 
	}, 
	{ 
		node: "EVENTS", 
		parent: "THINGS WITH SPATIAL LOCATION",
		children: []
	},
	{ 
		node: "SOLID OBJECTS", 
		parent: "PHYSICAL OBJECTS",
		children: ["LIVING THINGS", "FUNCTIONAL ARTIFACTS"] 
	},
	{ 
		node: "AGGREGATES", 
		parent: "PHYSICAL OBJECTS",
		children: [] 
	}, 
	{ 
		node: "LIVING THINGS", 
		parent: "SOLID OBJECTS",
		children: ["ANIMALS", "PLANTS"] 
	}, 
	{ 
		node: "FUNCTIONAL ARTIFACTS", 
		parent: "SOLID OBJECTS",
		children: [] 
	}, 
	{ 
		node: "ANIMALS", 
		parent: "LIVING THINGS",
		children: [] 
	}, 
	{ 
		node: "PLANTS", 
		parent: "LIVING THINGS",
		children: [] 
	},
]

// pre-condition: a category/kind, its parent in the tree, and an empty array for future children
// post-condition: a new node in the tree with the provided arguments and updated parent node
var makeNode = function(args) {
	// creates and pushes a node to the tree
	var temp = {
		node: args.node,
		parent: args.parent,
		children: args.children
	}
	ontologies.push(temp)

	// update the parent node
	_.where(ontologies, {node: args.parent})[0].children.push(args.node)

	return ontologies
}

// creates nodes of categories/kinds; can possibly instantiate priors/prior weights here
makeNode({node: "humans", parent: "ANIMALS", children: []})
makeNode({node: "parties", parent: "EVENTS", children: []})
makeNode({node: "phones", parent: "FUNCTIONAL ARTIFACTS", children: []})
makeNode({node: "roses", parent: "PLANTS", children: []})
makeNode({node: "dogs", parent: "ANIMALS", children: []})

// bins for discretizing distributions
var bins = _.range(-2, 12, 0.5)

// pre-condition: the mean and variance of the desired Gaussian distribution
// post-condition: returns a discrete version of a Gaussian distribution
var discreteGaussian = function(args) {
	var mu = args.mu
	var sigma = args.sigma
	var discreteProbs = map(function(b) {
		return Math.exp(Gaussian({mu: mu, sigma: sigma}).score(b))
	}, bins)
	return Infer({method: "enumerate"}, function() {
		categorical({ps: discreteProbs, vs: bins})
	})
}

// stores the prior distributions of various kinds over features
var featurePriors = {
	height: {
		humans: discreteGaussian({mu: 1, sigma: 1}),
		parties: discreteGaussian({mu: 10, sigma: 1}),
		phones: discreteGaussian({mu: 3, sigma: 1}),
		roses: discreteGaussian({mu: 5, sigma: 1}),
		dogs: discreteGaussian({mu: 7, sigma: 1})
	}
}

// sets up the feature of interest
var feature = "height"

// set up an array to store the kinds and their priors
var priors = []

// pre-condition: a character
// post-condition: returns 0 if the character is lowercase, 1 otherwise
var isLower = function(char) {
	return char === char.toLowerCase() ? 0 : 1
}

// recursively traverses through the tree, mixing the prior distributions of kinds
// pre-condition: a node (category or kind)
// post-condition: the mixed prior distribution of the node over a feature
var getPrior = function(node) {
	// if there is no node, then return
	if (_.isEmpty(node)) { return } 

	// variable for storing the object of the current node
	var currentNode = _.where(ontologies, {node: node})[0]
	
	// applies recursion to every child of the current node
	map(getPrior, currentNode.children)

	// if a node does not have children...
	if (_.isEmpty(currentNode.children)) {
		// ...and if it is a kind, push the kind onto the priors array
		if (sum(map(isLower, node)) === 0) { 
			return priors.push({node: node, prior: featurePriors[feature][node]})
		} 

		// ...and if it is a category, it does not have any priors either so return
		return
	}

	// else, the node has children and we can mix the priors up to this node
	var prior = {node: node, prior: mixPriors(filter(function(p) {
		return _.contains(currentNode.children, p.node)
	}, priors))}

	// pop off the priors of the kinds that were just mixed
	repeat(currentNode.children.length, function() {
		return priors.pop()
	})

	// finally, push the mixed prior to the priors array
	priors.push(prior)

	return
}

// pre-condition: an array of kinds
// post-condition: determines the weights on the prior distributions of the kinds before mixing
var priorWeights = function(node) {
	return repeat(node.length, function() {
		return 1
	})
}

// pre-condition: a filtered list of prior distributions
// post-condition: a mixed distribution of the priors
var mixPriors = function(filteredPrior) {
	// plucks the names of the nodes from the list 
	var p = _.pluck(filteredPrior, "node")
	return Infer({method: "enumerate"}, function() {
		var whichPrior = categorical({vs: p, ps: priorWeights(p)})
		return sample(_.where(priors, {node: whichPrior})[0].prior) // height object is temporary
	})
}

getPrior("ALL THINGS")

// priors is normally an array of objects: {node: ..., prior: ...}
priors[0].prior